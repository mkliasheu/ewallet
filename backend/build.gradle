plugins {
    id 'org.springframework.boot' version '2.3.7.RELEASE'
    id 'com.palantir.docker' version '0.25.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'by.kliasheu'
version = '1.0'
sourceCompatibility = 15
targetCompatibility = 15

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    mapstruct = '1.4.1.Final'
    springfox = '3.0.0'
    jjwt = '0.9.1'
    testcontainers = '1.15.1'
    springCloudFeignVersion = '2.2.6.RELEASE'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
//    implementation "org.springframework.boot:spring-boot-starter-security"
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    runtimeOnly "org.postgresql:postgresql"
    implementation "org.liquibase:liquibase-core"
    implementation "io.springfox:springfox-boot-starter:${springfox}"
    implementation "io.springfox:springfox-swagger-ui:${springfox}"

    implementation "org.mapstruct:mapstruct:${mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct}"
    implementation "io.jsonwebtoken:jjwt:${jjwt}"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudFeignVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile "org.testcontainers:testcontainers:${testcontainers}"
    testCompile "org.testcontainers:postgresql:${testcontainers}"
    testCompile "org.testcontainers:junit-jupiter:${testcontainers}"
}

test {
    useJUnitPlatform()
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
//    name "${project.group}/${bootJar.archiveBaseName.getOrNull()}"
    name "${project.group}/${project.name}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}