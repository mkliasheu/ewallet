[{"E:\\workspace\\ewallet\\frontend\\src\\index.js":"1","E:\\workspace\\ewallet\\frontend\\src\\reportWebVitals.js":"2","E:\\workspace\\ewallet\\frontend\\src\\components\\Wallet.js":"3","E:\\workspace\\ewallet\\frontend\\src\\components\\Transaction.js":"4","E:\\workspace\\ewallet\\frontend\\src\\components\\EwalletApp.js":"5","E:\\workspace\\ewallet\\frontend\\src\\components\\WalletContainer.js":"6","E:\\workspace\\ewallet\\frontend\\src\\components\\TransactionContainer.js":"7","E:\\workspace\\ewallet\\frontend\\src\\components\\AddWalletDialog.js":"8","E:\\workspace\\ewallet\\frontend\\src\\redux\\store.js":"9","E:\\workspace\\ewallet\\frontend\\src\\components\\DepositDialog.js":"10","E:\\workspace\\ewallet\\frontend\\src\\components\\WithdrawDialog.js":"11","E:\\workspace\\ewallet\\frontend\\src\\components\\P2PTransferDialog.js":"12","E:\\workspace\\ewallet\\frontend\\src\\redux\\api.js":"13","E:\\workspace\\ewallet\\frontend\\src\\redux\\reducer.js":"14","E:\\workspace\\ewallet\\frontend\\src\\redux\\actions.js":"15"},{"size":641,"mtime":1608144841550,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":2255,"mtime":1608202913507,"results":"19","hashOfConfig":"17"},{"size":837,"mtime":1608146484746,"results":"20","hashOfConfig":"17"},{"size":463,"mtime":1608042430795,"results":"21","hashOfConfig":"17"},{"size":1521,"mtime":1608202913538,"results":"22","hashOfConfig":"17"},{"size":1276,"mtime":1608202913551,"results":"23","hashOfConfig":"17"},{"size":3744,"mtime":1608202913567,"results":"24","hashOfConfig":"17"},{"size":274,"mtime":1608202913489,"results":"25","hashOfConfig":"17"},{"size":2616,"mtime":1608202913627,"results":"26","hashOfConfig":"17"},{"size":2633,"mtime":1608202913522,"results":"27","hashOfConfig":"17"},{"size":4249,"mtime":1608202913447,"results":"28","hashOfConfig":"17"},{"size":3380,"mtime":1608202913588,"results":"29","hashOfConfig":"17"},{"size":5800,"mtime":1608202913647,"results":"30","hashOfConfig":"17"},{"size":4126,"mtime":1608201754900,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"trd4yl",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\workspace\\ewallet\\frontend\\src\\index.js",[],["69","70"],"E:\\workspace\\ewallet\\frontend\\src\\reportWebVitals.js",[],"E:\\workspace\\ewallet\\frontend\\src\\components\\Wallet.js",[],"E:\\workspace\\ewallet\\frontend\\src\\components\\Transaction.js",[],"E:\\workspace\\ewallet\\frontend\\src\\components\\EwalletApp.js",[],"E:\\workspace\\ewallet\\frontend\\src\\components\\WalletContainer.js",["71"],"import React, {useEffect} from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Wallet from \"./Wallet\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getWallets, getWalletsPending} from \"../redux/reducer\";\r\nimport {fetchWallets} from \"../redux/api\";\r\nimport DepositDialog from \"./DepositDialog\";\r\nimport WithdrawDialog from \"./WithdrawDialog\";\r\nimport P2PTransferDialog from \"./P2PTransferDialog\";\r\n\r\nexport default function WalletContainer() {\r\n    const dispatch = useDispatch();\r\n    const wallets = useSelector(getWallets);\r\n    const pending = useSelector(getWalletsPending)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchWallets())\r\n    }, [])\r\n\r\n    if (!pending) {\r\n        if (wallets == null || wallets.length === 0) {\r\n            return <h2>There is no wallets yet. Click 'add wallet' button to add one</h2>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <P2PTransferDialog/>\r\n                <DepositDialog/>\r\n                <WithdrawDialog/>\r\n                <List className=\"wallets\">\r\n                    {wallets.map((wallet) =>\r\n                        <ListItem key={wallet.id}>\r\n                            <Wallet id={wallet.id} name={wallet.name} balance={wallet.balance}\r\n                                    currency={wallet.currency}/>\r\n                        </ListItem>\r\n                    )}\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n    return <h1>Loading</h1>;\r\n}","E:\\workspace\\ewallet\\frontend\\src\\components\\TransactionContainer.js",["72","73"],"import React, {useEffect} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getTransactions} from \"../redux/WalletReducer\";\r\nimport {fetchTransactions} from \"../redux/WalletApiActions\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Transaction from \"./Transaction\";\r\n\r\nexport default function TransactionContainer({walletId}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const transactions = useSelector((state) => getTransactions(state, walletId));\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTransactions(walletId));\r\n    }, [])\r\n\r\n    if (transactions == null || transactions.length === 0) {\r\n        return <h4>No transactions yet</h4>\r\n    } else\r\n        return (\r\n            <List className=\"transactions\">\r\n                {transactions.map((transaction) =>\r\n                    <ListItem key={transaction.id}>\r\n                        <Transaction id={transaction.id} type={transaction.type} amount={transaction.amount}\r\n                                     createdAt={transaction.createdAt}/>\r\n                    </ListItem>\r\n                )}\r\n            </List>\r\n        );\r\n}\r\n\r\nTransactionContainer.propTypes = {\r\n    walletId: PropTypes.number\r\n}\r\n","E:\\workspace\\ewallet\\frontend\\src\\components\\AddWalletDialog.js",["74"],"import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrencies, getSelectedCurrency, isAddWalletDialogOpened} from \"../redux/reducer\";\r\nimport {closeAddWalletDialog, openAddWalletDialog, selectCurrency} from \"../redux/actions\";\r\nimport {fetchCurrencies, postWallet} from \"../redux/api\";\r\n\r\nexport default function AddWalletDialog() {\r\n\r\n    const dispatch = useDispatch();\r\n    const availableCurrencies = useSelector(getCurrencies);\r\n    const selectedCurrency = useSelector(getSelectedCurrency)\r\n    const isDialogOpened = useSelector(isAddWalletDialogOpened)\r\n\r\n    const walletNameInputRef = useRef();\r\n\r\n    const handleOpen = () => {\r\n        dispatch(openAddWalletDialog());\r\n    };\r\n\r\n    const handleClose = () => {\r\n        dispatch(closeAddWalletDialog());\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        dispatch(selectCurrency(event.target.value));\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        saveWallet();\r\n        handleClose();\r\n    };\r\n\r\n    const saveWallet = () => {\r\n        dispatch(postWallet(walletNameInputRef.current.value, selectedCurrency))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCurrencies())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\r\n                Add wallet\r\n            </Button>\r\n            <Dialog open={isDialogOpened} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Add wallet</DialogTitle>\r\n                <DialogContent>\r\n                    <FormControl className=\"currency-selector\">\r\n                        <InputLabel id=\"demo-simple-select-label\">Currency</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={selectedCurrency}\r\n                            onChange={handleChange}\r\n                        >\r\n                            {/*TODO extract to another component*/}\r\n                            {availableCurrencies.map((currency) =>\r\n                                <MenuItem key={currency} value={currency}>\r\n                                    {currency}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        fullWidth\r\n                        inputRef={walletNameInputRef}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirm} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","E:\\workspace\\ewallet\\frontend\\src\\redux\\store.js",[],"E:\\workspace\\ewallet\\frontend\\src\\components\\DepositDialog.js",["75"],"import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport React, {useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {closeDepositDialog} from \"../redux/actions\";\r\nimport {postDepositTransfer} from \"../redux/api\";\r\nimport {getApiError, getSelectedWalletId, isDepositDialogOpened} from \"../redux/reducer\";\r\n\r\nexport default function DepositDialog() {\r\n\r\n    const dispatch = useDispatch();\r\n    const selectedWalletId = useSelector(getSelectedWalletId);\r\n    const apiError = useSelector(getApiError);\r\n    const isDialogOpened = useSelector((state) => isDepositDialogOpened(state, selectedWalletId));\r\n\r\n    const depositAmountInputRef = useRef();\r\n\r\n    const handleClose = () => {\r\n        // dispatch(resetApiError());\r\n        dispatch(closeDepositDialog());\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        dispatch(postDepositTransfer(selectedWalletId, depositAmountInputRef.current.value));\r\n        if (apiError == null) {\r\n            handleClose()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={isDialogOpened} onClose={handleClose} aria-labelledby=\"deposit-dialog-title\">\r\n                <DialogTitle id=\"deposit-dialog-title\">Deposit money</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            inputProps: {\r\n                                min: 0.001\r\n                            }\r\n                        }}\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Amount\"\r\n                        fullWidth\r\n                        inputRef={depositAmountInputRef}\r\n                    />\r\n                    {/*{apiError != null ? <span className=\"error\">{apiError}</span> : ''}*/}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirm} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","E:\\workspace\\ewallet\\frontend\\src\\components\\WithdrawDialog.js",["76","77","78","79"],"import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport React, {useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {closeWithdrawDialog} from \"../redux/actions\";\r\nimport {postWithdrawalTransfer} from \"../redux/api\";\r\nimport {getApiError, getSelectedWalletId, isWithdrawDialogOpened} from \"../redux/reducer\";\r\n\r\nexport default function WithdrawDialog() {\r\n\r\n    const dispatch = useDispatch();\r\n    const selectedWalletId = useSelector(getSelectedWalletId);\r\n    const apiError = useSelector(getApiError);\r\n    const isDialogOpened = useSelector((state) => isWithdrawDialogOpened(state, selectedWalletId));\r\n\r\n    const withdrawAmountInputRef = useRef();\r\n\r\n    const handleClose = () => {\r\n        // dispatch(resetApiError());\r\n        dispatch(closeWithdrawDialog());\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        dispatch(postWithdrawalTransfer(selectedWalletId, withdrawAmountInputRef.current.value));\r\n        if (apiError == null) {\r\n            handleClose()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={isDialogOpened} onClose={handleClose} aria-labelledby=\"withdraw-dialog-title\">\r\n                <DialogTitle id=\"withdraw-dialog-title\">Withdraw money</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            inputProps: {\r\n                                min: 0.001\r\n                            }\r\n                        }}\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Amount\"\r\n                        fullWidth\r\n                        inputRef={withdrawAmountInputRef}\r\n                    />\r\n                    {/*{apiError != null ? <span className=\"error\">{apiError}</span> : ''}*/}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirm} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","E:\\workspace\\ewallet\\frontend\\src\\components\\P2PTransferDialog.js",["80"],"import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {closeP2PTransferDialog, selectReceiverWallet} from \"../redux/actions\";\r\nimport {postP2PTransfer} from \"../redux/api\";\r\nimport {\r\n    getApiError,\r\n    getSelectedReceiverWallet,\r\n    getSelectedWalletId,\r\n    getWallets,\r\n    isP2PDialogOpened\r\n} from \"../redux/reducer\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nexport default function P2PTransferDialog() {\r\n\r\n    const dispatch = useDispatch();\r\n    const selectedWalletId = useSelector(getSelectedWalletId);\r\n    const apiError = useSelector(getApiError);\r\n    const isDialogOpened = useSelector((state) => isP2PDialogOpened(state, selectedWalletId));\r\n    const availableWallets = useSelector(getWallets);\r\n    const receiverWallet = useSelector(getSelectedReceiverWallet)\r\n\r\n    const transferAmountInputRef = useRef();\r\n\r\n    const handleClose = () => {\r\n        // dispatch(resetApiError());\r\n        dispatch(closeP2PTransferDialog());\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        dispatch(postP2PTransfer(selectedWalletId, receiverWallet, transferAmountInputRef.current.value));\r\n        if (apiError == null) {\r\n            handleClose();\r\n        }\r\n    }\r\n\r\n    const handleReceiverWalletChange = (event) => {\r\n        dispatch(selectReceiverWallet(event.target.value));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (availableWallets != null && availableWallets.length > 0) {\r\n            dispatch(selectReceiverWallet(availableWallets[0].id))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={isDialogOpened} onClose={handleClose} aria-labelledby=\"p2ptransfer-dialog-title\">\r\n                <DialogTitle id=\"deposit-dialog-title\">Transfer money</DialogTitle>\r\n                <DialogContent>\r\n                    <FormControl className=\"wallet-selector\">\r\n                        <InputLabel id=\"demo-simple-select-label\">Receiver Wallet</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={receiverWallet}\r\n                            onChange={handleReceiverWalletChange}\r\n                        >\r\n                            {/*TODO extract to another component*/}\r\n                            {availableWallets.map((wallet) =>\r\n                                <MenuItem key={wallet.id} value={wallet.id}>\r\n                                    {wallet.name}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            inputProps: {\r\n                                min: 0.001\r\n                            }\r\n                        }}\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Amount\"\r\n                        fullWidth\r\n                        inputRef={transferAmountInputRef}\r\n                    />\r\n                    {/*{apiError != null ? <span className=\"error\">{apiError}</span> : ''}*/}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirm} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","E:\\workspace\\ewallet\\frontend\\src\\redux\\api.js",[],"E:\\workspace\\ewallet\\frontend\\src\\redux\\reducer.js",[],"E:\\workspace\\ewallet\\frontend\\src\\redux\\actions.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":19,"column":8,"nodeType":"87","endLine":19,"endColumn":10,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":4,"column":26,"nodeType":"91","messageId":"92","endLine":4,"endColumn":36},{"ruleId":"85","severity":1,"message":"93","line":17,"column":8,"nodeType":"87","endLine":17,"endColumn":10,"suggestions":"94"},{"ruleId":"85","severity":1,"message":"86","line":49,"column":8,"nodeType":"87","endLine":49,"endColumn":10,"suggestions":"95"},{"ruleId":"89","severity":1,"message":"96","line":9,"column":29,"nodeType":"91","messageId":"92","endLine":9,"endColumn":42},{"ruleId":"89","severity":1,"message":"97","line":9,"column":9,"nodeType":"91","messageId":"92","endLine":9,"endColumn":27},{"ruleId":"89","severity":1,"message":"96","line":9,"column":50,"nodeType":"91","messageId":"92","endLine":9,"endColumn":63},{"ruleId":"89","severity":1,"message":"98","line":10,"column":9,"nodeType":"91","messageId":"92","endLine":10,"endColumn":28},{"ruleId":"89","severity":1,"message":"99","line":11,"column":43,"nodeType":"91","messageId":"92","endLine":11,"endColumn":64},{"ruleId":"85","severity":1,"message":"100","line":54,"column":8,"nodeType":"87","endLine":54,"endColumn":10,"suggestions":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["104"],"no-unused-vars","'getWallets' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'walletId'. Either include them or remove the dependency array.",["105"],["106"],"'resetApiError' is defined but never used.","'closeDepositDialog' is defined but never used.","'postDepositTransfer' is defined but never used.","'isDepositDialogOpened' is defined but never used.","React Hook useEffect has missing dependencies: 'availableWallets' and 'dispatch'. Either include them or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"108","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [dispatch]",{"range":"115","text":"116"},"Update the dependencies array to be: [dispatch, walletId]",{"range":"117","text":"118"},{"range":"119","text":"116"},"Update the dependencies array to be: [availableWallets, dispatch]",{"range":"120","text":"121"},[748,750],"[dispatch]",[667,669],"[dispatch, walletId]",[1807,1809],[2088,2090],"[availableWallets, dispatch]"]